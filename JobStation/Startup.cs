using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Hosting;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Dapper;using Microsoft.Data.Sqlite;using JobStation.Models.DataModel;using Microsoft.AspNetCore.Authentication.Cookies;namespace JobStation{    public class Startup    {        public Startup(IConfiguration configuration)        {            Configuration = configuration;        }        public IConfiguration Configuration { get; }        // This method gets called by the runtime. Use this method to add services to the container.        public void ConfigureServices(IServiceCollection services)        {            //var connectoinString = string.Format(Configuration.GetConnectionString("DefaultConnection"), System.IO.Directory.GetCurrentDirectory());            //using (var con = new SqliteConnection(connectoinString))            //{            //    var users = con.Query<User>("select * from users").ToList();            //}            //验证注入            services.AddAuthentication(opts =>            {                opts.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;            }).AddCookie(CookieAuthenticationDefaults.AuthenticationScheme, opt =>            {                opt.LoginPath = new Microsoft.AspNetCore.Http.PathString("/login");                opt.LogoutPath = new Microsoft.AspNetCore.Http.PathString("/login");                opt.Cookie.Path = "/";                opt.AccessDeniedPath = new Microsoft.AspNetCore.Http.PathString("/home/error");            });            services.AddMvc();        }        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IHostingEnvironment env)        {            if (env.IsDevelopment())            {                app.UseDeveloperExceptionPage();            }            else            {                app.UseExceptionHandler("/Home/Error");            }            app.UseStaticFiles();            app.UseAuthentication();            app.UseMvc(routes =>            {                routes.MapRoute(                    name: "default",                    template: "{controller=Home}/{action=Index}/{id?}");            });        }    }}